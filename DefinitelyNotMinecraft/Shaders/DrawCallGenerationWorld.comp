
#extension GL_EXT_shader_8bit_storage : require

struct DrawCall
{
      uint vertexCount;
      uint instanceCount;
      uint firstVertex;
      uint firstInstance;
};

layout (std140, binding = 0) uniform projectionBuffer
{
    mat4 projection;
};

layout (std140, binding = 1) uniform viewBuffer
{
    mat4 view;
    vec4 cameraPos;
};

layout (std140, binding = 2) buffer transformBuffer
{
    vec4 transforms[];
};

layout (std430, binding = 4) readonly buffer worldDataBuffer
{
    uint8_t blockTypeWorld[];
};

layout (std430, binding = 3) buffer blockTypeBuffer
{
    uint8_t blockType[];
};

layout (binding = 5) buffer drawCallBuffer
{
    DrawCall drawcall;
};

layout (binding = 6) uniform chunkConstants
{
    int chunkLoadCount;
    int chunksOneDimension;
    int chunkLocalSize;
    int chunkHeight;
};

layout (binding = 7) buffer chunkIndexRemap
{
    uint remapIndex[];
};

vec3 indexToPos()
{
  int remap = int(remapIndex[gl_WorkGroupID.x]);
  int remapOffsetX = (remap % chunksOneDimension) - chunkLoadCount;
  int remapOffsetZ = (remap / chunksOneDimension) - chunkLoadCount;
  int chunkStartX = int(chunkLocalSize * (remapOffsetX + int(cameraPos.x / chunkLocalSize)));
  int chunkStartZ = int(chunkLocalSize * (remapOffsetZ + int(cameraPos.z / chunkLocalSize)));
  int x = int(gl_LocalInvocationID.x) + chunkStartX;
  int z = int(gl_LocalInvocationID.z) + chunkStartZ;

  return vec3(x, gl_WorkGroupID.y, z);
}

uint toFlatIndex()
{
  int remap = int(remapIndex[gl_WorkGroupID.x]);
  int chunkStartX = (remap % chunksOneDimension);
  int chunkStartZ = (remap / chunksOneDimension);
  
  int heightOffset = chunkLocalSize * chunkLocalSize * int(gl_WorkGroupID.y);
  
  int sizeOfChunk = chunkLocalSize * chunkLocalSize * chunkHeight;
  int offsetPreviousChunk = chunkStartX * sizeOfChunk + chunkStartZ * chunksOneDimension * sizeOfChunk;
   
  int inLayerOffset = (int(gl_LocalInvocationID.z) % chunkLocalSize) * chunkLocalSize + (int(gl_LocalInvocationID.x) % chunkLocalSize);

  return offsetPreviousChunk + heightOffset + inLayerOffset;
}

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

uint highestBitSet = uint(128);

void main()
{
  uint blockIndex = toFlatIndex();

  uint block = uint(blockTypeWorld[blockIndex]);
  if(block == uint(255) || (block & uint(128)) != 0u)
  {
    return;
  }
  
  vec3 position = indexToPos();

  int x = int(position.x);
  int y = int(position.y);
  int z = int(position.z);

  int endX = x + 1;
  int endZ = z + 1;
  int endY = y + 1;

  // A naive version of frustum culling
  const vec4 corners[8] = vec4[8](
    vec4(x, y, z, 1.0f),
    vec4(endX, y, z, 1.0f),
    vec4(x, endY, z, 1.0f),
    vec4(endX, endY, z, 1.0f),
    vec4(x, y, endZ, 1.0f),
    vec4(endX, y, endZ, 1.0f),
    vec4(x, endY, endZ, 1.0f),
    vec4(endX, endY, endZ, 1.0f)
    );    

  mat4 pv = projection * view;
  bool chunkVisible = false;
  for(int i=0;i<8;++i)
  {
    vec4 corner = pv * corners[i];
    bool xIsIn = -corner.w <= corner.x && corner.x <= corner.w;
    bool yIsIn = -corner.w <= corner.y && corner.y <= corner.w;
    bool zIsIn = 0.0f <= corner.z && corner.z <= corner.w;
    chunkVisible = chunkVisible || (xIsIn && yIsIn && zIsIn);
  } 

  if(!chunkVisible)
  {
    return;
  }

  uint localWriteIndex = atomicAdd(drawcall.instanceCount, 1u);

  blockType[localWriteIndex] = uint8_t(block);

  transforms[localWriteIndex] = vec4(x, y, z, 1.0f); 
}
