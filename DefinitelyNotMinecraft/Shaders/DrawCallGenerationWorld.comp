
#extension GL_EXT_shader_8bit_storage : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#include "Shaders/CameraBuffer.glsl"
#include "Shaders/BlockWorldBuffer.glsl"
#include "Shaders/BlockWorldUtil.glsl"

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

uint highestBitSet = uint(128);

void main()
{
  uint blockIndex = toFlatIndex(ivec3(int(gl_LocalInvocationID.x), int(gl_WorkGroupID.y), int(gl_LocalInvocationID.z)));

  uint block = uint(blockTypeWorld[blockIndex]);
  if(block == air)
  {
    return;
  }
  
  vec3 position = indexToPos();

  uint instanceVisible = isVisible(vec3(position.x + 0.5f, position.y + 0.5f, position.z + 0.5f), 0.5f) ? 1 : 0;

  uint visibleFacesCount;
  uint[6] visibleFaces = getVisibleFaces(ivec3(int(position.x), int(position.y), int(position.z)), visibleFacesCount);
  visibleFacesCount = instanceVisible == 1 ? visibleFacesCount : 0u;

  uint localIndex = subgroupExclusiveAdd(visibleFacesCount);
  uint transformLocalIndex = subgroupExclusiveAdd(instanceVisible);

  uint highestActiveID = subgroupBallotFindMSB(subgroupBallot(true));

  uint globalIndex = 0;
  uint transformGlobalIndex = 0;

  // If we're the highest active ID, carve out a chunk from the global index
  if (highestActiveID == gl_SubgroupInvocationID)
  {
    uint localSize = localIndex + visibleFacesCount;
    atomicAdd(drawcall.vertexCount, 6 * localSize);
    globalIndex = atomicAdd(drawcall.globalIndexFace, localSize);
    uint transformLocalSize = transformLocalIndex + instanceVisible;
    transformGlobalIndex = atomicAdd(drawcall.globalIndexTransform, transformLocalSize);
  }

  globalIndex = subgroupMax(globalIndex);
  transformGlobalIndex = subgroupMax(transformGlobalIndex);

  if(instanceVisible > 0)
  {
      for(uint i = 0u; i < visibleFacesCount; ++i)
      {
          blockData[globalIndex + localIndex + i].index = transformGlobalIndex + transformLocalIndex;
          blockData[globalIndex + localIndex + i].blockType = uint8_t(block);
          blockData[globalIndex + localIndex + i].visibleFace = uint8_t(visibleFaces[i]);
      }
      transforms[transformGlobalIndex + transformLocalIndex] = vec4(position.x, position.y, position.z, 1.0f);
  }
}
