# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      vulkanversion:
        description: 'Vulkan Version'
        required: false
        default: '1.3.296.0'
      components:
        description: 'Vulkan SDK Components (comma-separated)'
        required: false
        default: 'Vulkan-Headers,Vulkan-Loader,Shaderc'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        include:
          - os: "windows-latest"
            preset: "x64-debug"
          - os: "windows-latest"
            preset: "x64-debug-msvc"
          - os: "windows-latest"
            preset: "x64-release"
          - os: "windows-latest"
            preset: "x64-release-msvc"

    steps:
    - uses: actions/checkout@v4
    # Ninja support
    - uses: seanmiddleditch/gha-setup-ninja@master
    # MSVC lookup support
    - uses: ilammy/msvc-dev-cmd@v1
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # windows
    - name: Download and install Vulkan SDK (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $version = "${{ github.event.inputs.vulkanversion }}"
        $components = "${{ github.event.inputs.components }}"
        $installer = "VulkanSDK-$version-Installer.exe"

        Write-Host "Downloading Vulkan SDK version $version"
        Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/$version/windows/$installer" -OutFile $installer

        Write-Host "Installing Vulkan SDK with components: $components"
        Start-Process -FilePath ".\$installer" -ArgumentList "/S", "/COMPONENTS=$components" -Wait

        $vulkanRoot = "C:\VulkanSDK\$version"
        echo "VULKAN_SDK=$vulkanRoot" >> $env:GITHUB_ENV
        echo "Path=$vulkanRoot\Bin;$env:Path" >> $env:GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        --preset ${{ matrix.preset }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --preset ${{ matrix.preset }}
